name: "triggered on PUSH"

on:
  push:
    branches:
      - main

jobs:
  get_changed_files:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    outputs:
      IMAGES_TO_BUILD: ${{ steps.set_images.outputs.IMAGES_TO_BUILD }}
    steps:
      # Dirty way (Personally I like it)
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files manually
        run: |
          files_list="$(git diff --name-only ${{ github.event.before }} HEAD | xargs)"
          echo '# Files with git command' >> "${GITHUB_STEP_SUMMARY}"
          echo '' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

          for file in ${files_list}; do
            echo "$file was changed" >> "${GITHUB_STEP_SUMMARY}"
          done

          echo '```' >> "${GITHUB_STEP_SUMMARY}"

          # save files into variable
          printf 'THE_FILES=%s\n' "${files_list}" >> "${GITHUB_ENV}"

      # Since output of tj-actions/changed-files and
      - name: Get docker image names
        # I'm familiar with python so will use it to parse file names
        # be careful if you have spaces into file names
        shell: python
        run: |
          from os import environ
          import json

          # split files string into list. Divide by spaces
          files = environ.get("THE_FILES").split(' ')
          images = []

          for file in files:
              # Remove hej.txt from file
              path = file.split("/")[0:3]
              path = "/".join(path)
              if(path not in images and path.startswith("src")):
                  images.append(path)

          # save retreived images as json array
          with open(environ.get("GITHUB_ENV"), 'a') as f:
            f.write('IMAGES_TO_BUILD=' + json.dumps(images) + '\n')

      - name: Set image names as output for matrix
        id: set_images
        run: |
          echo "IMAGES_TO_BUILD=${IMAGES_TO_BUILD}" >> $GITHUB_OUTPUT

  print_image_names_with_matrix:
    name: "Build image: ${{ matrix.image }}"
    runs-on: ubuntu-latest
    needs: get_changed_files
    strategy:
      matrix:
        image: ${{ fromJson( needs.get_changed_files.outputs.IMAGES_TO_BUILD ) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Print image name from matrix
        run: |
          echo ls -la
          echo "Navigating to folder ${{ matrix.image }}"
          cd ${{ matrix.image }}
          docker build .
